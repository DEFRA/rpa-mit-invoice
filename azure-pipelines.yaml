pool: 
  vmImage: ubuntu-latest

trigger: none

stages:
 - stage: quality
   jobs:
   - job: 'Linting'
     steps:
     - task: DotNetCoreCLI@2
       displayName: Whitespace Format
       inputs: 
         command: 'custom'
         custom: format
         arguments: 'whitespace --verbosity n --verify-no-changes'

   - job: 'Testing'
     steps:
       - task: DotNetCoreCLI@2
         displayName: Run Tests
         inputs: 
           command: test
           projects: '**/*Test/*.csproj'
           arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --logger trx'  

 - stage: build
   jobs:
   - job: 'Build'
     steps:
     - task: UseDotNet@2
       displayName: 'Use .NET 6 SDK'
       inputs:
         version: 6.0.x
     - task: DotNetCoreCLI@2
       displayName: Build project
       inputs: 
         command: build
         projects: '**/*.csproj'
         arguments: '--configuration $(buildConfiguration)'

     - task: CopyFiles@2
       displayName: Copy to Artifactory
       inputs:
         Contents: '**'
         TargetFolder: '$(Build.ArtifactStagingDirectory)'
     - publish: $(Build.ArtifactStagingDirectory)
       displayName: Save Atifact
       artifact: ManualInvoiceTemplateInvoiceBuild

 - stage: smelling
   jobs:
   - job: 'Sniffing'
     steps:
     - task: SonarCloudPrepare@1
       displayName: 'Prepare analysis on SonarCloud'
       inputs:
         SonarCloud: 'SonarCloud defradigital'
         organization: 'defra'
         scannerMode: 'MSBuild'
         projectKey: 'EST.MIT.Invoice'
         projectName: 'EST.MIT.Invoice'
         extraProperties: |
           sonar.exclusions=**/obj/**,**/*.dll,**/*.cshtml,**/*.css,**/*.js,**/*.json,**/Migrations/**,**/wwwroot/**,**/EST.MIT.Web.Test/**,**/Program.cs,**/ErrorViewModel.cs
           sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml
           sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx
           $(additionalSonarParams)

     - task: DownloadBuildArtifacts@1
       inputs:
         buildType: 'current'
         downloadType: 'single'
         artifactName: 'ManualInvoiceTemplateInvoiceBuild'
         downloadPath: '$(System.ArtifactsDirectory)'

     - task: SonarCloudAnalyze@1
       displayName: 'Sniffing'

     - task: SonarCloudPublish@1
       displayName: 'Publish Sonar Results'
       continueOnError: true
       inputs:
         pollingTimeoutSec: '300'

 - stage: 
   dependsOn: build
   jobs:
     - job: publish
       steps:
         - download: current
           artifact: ManualInvoiceTemplateInvoiceBuild

         - task: DotNetCoreCLI@2
           displayName: Create Artifact
           inputs:
             command: 'publish'
             publishWebProjects: true
             arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
             zipAfterPublish: True

         - task: PublishBuildArtifacts@1
           displayName: Publish Artifact
           inputs:
             PathtoPublish: '$(Build.ArtifactStagingDirectory)'
             ArtifactName: 'ManualInvoiceTemplateInvoice'
             publishLocation: 'Container'

 - stage: deploy
   jobs: 
     - job: SandboxDeploy
       steps:
       - task: DownloadBuildArtifacts@1
         inputs:
           buildType: 'current'
           downloadType: 'single'
           artifactName: 'ManualInvoiceTemplateInvoice'
           downloadPath: '$(System.ArtifactsDirectory)'
       - task: AzureRmWebAppDeployment@4
         inputs:
           ConnectionType: 'AzureRM'
           azureSubscription: 'AZD-EST-SND1'
           appType: 'webAppLinux'
           WebAppName: 'SNDESTMITSAS'
           packageForLinux: '$(Build.ArtifactStagingDirectory)/**/*.zip'